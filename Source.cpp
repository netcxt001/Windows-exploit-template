#include <Windows.h>
#include <stdio.h>

#define SIZE 1000

int main(int argc, WCHAR* argv[])
{
	HANDLE hFile;
	HANDLE hHeap;
	LPCWSTR filename = L"C:\\Users\\netcxt001\\Desktop\\exploit.txt";
	PUCHAR pHeapAddr;
	BOOL bWrite;
	BOOL bFree;
	DWORD dwWritten = 0;

	wprintf(L"[!]Exploit developed by netcxt001\r\n");
	wprintf(L"[!]GitHub: @netcxt001\r\n");
	wprintf(L"[*]Template for file text exploits...\r\n");

	hFile = CreateFile(
		filename,
		GENERIC_WRITE | GENERIC_READ,
		FILE_SHARE_READ,
		NULL,
		CREATE_NEW,
		FILE_ATTRIBUTE_NORMAL,
		NULL
	);

	if (hFile == INVALID_HANDLE_VALUE) {

		wprintf(L"[-]Error creating file...\r\n");

	}

	else {

		wprintf(L"[+]File created successfully...\r\n");

	}

	hHeap = GetProcessHeap();

	if (hHeap == INVALID_HANDLE_VALUE) {

		wprintf(L"[-]Error generating heap...\r\n");

	}

	else {

		wprintf(L"[+]Heap generated successfully...\r\n");

	}

	pHeapAddr = (PUCHAR)HeapAlloc(
		hHeap,
		HEAP_ZERO_MEMORY,
		SIZE
	);

	if (pHeapAddr == NULL) {

		wprintf(L"[-]Error allocating heap memory...\r\n");

	}

	else {

		wprintf(L"[+]Heap memory allocated successfully...\r\n");
	}

	RtlFillMemory(pHeapAddr, SIZE, 0x41);
	RtlCopyMemory(pHeapAddr + 100, "HELLO", 0x5);


	bWrite = WriteFile(
		hFile,
		pHeapAddr,
		SIZE,
		&dwWritten,
		NULL
	);

	if (bWrite == FALSE) {

		wprintf(L"[-]Error writing file...\r\n");

	}

	else {

		wprintf(L"[+]File writed successfully...\r\n");

	}

	printf("[*]Exploit code: %s\r\n", pHeapAddr);

	bFree = HeapFree(hHeap, HEAP_NO_SERIALIZE, pHeapAddr);

	if (bFree == FALSE) {

		wprintf(L"[-]Error freezing heap memory...\r\n");

	}

	else {

		wprintf(L"[+]Heap memory freezed successfully...\r\n");

	}

	system("PAUSE");

	return 0;

}